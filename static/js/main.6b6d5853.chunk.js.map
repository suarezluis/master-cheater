{"version":3,"sources":["components/Search.jsx","data/questions.js","components/Result.jsx","components/Results.jsx","App.js","serviceWorker.js","index.js"],"names":["Search","htmlFor","type","name","id","onChange","event","props","updateSearch","target","value","Component","questions","q","a","Result","this","question","answer","Results","results","map","index","App","state","search","matches","term","setState","toLowerCase","compareAndFilter","filter","toLocaleLowerCase","includes","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uPAEqBA,G,uLACT,IAAD,OACP,OACE,6BACE,6BACA,2BAAOC,QAAQ,IAAf,UACA,6BACA,2BACEC,KAAK,OACLC,KAAK,SACLC,GAAG,SACHC,SAAU,SAAAC,GACR,EAAKC,MAAMC,aAAaF,EAAMG,OAAOC,e,GAZbC,cCFvBC,EAAY,CACvB,CACEC,EAAG,qBACHC,EAAG,8BAEL,CACED,EAAG,uBACHC,EAAG,oBAEL,CACED,EAAE,2GACFC,EAAE,g8CCTeC,E,iLAEjB,OACE,6BACE,wCACY,6BADZ,IACoBC,KAAKT,MAAMU,UAE/B,sCACU,6BADV,IACkBD,KAAKT,MAAMW,a,GARDP,aCEfQ,E,iLAEjB,OACE,6BACGH,KAAKT,MAAMa,QAAQC,KAAI,SAACJ,EAAUK,GACjC,OAAO,kBAAC,EAAD,CAAQL,SAAUA,EAASJ,EAAGK,OAAQD,EAASH,Y,GAL3BH,aCIhBY,E,2MACnBC,MAAQ,CAAEC,OAAQ,GAAIb,UAAWA,EAAWc,QAAS,I,EAErDlB,aAAe,SAAAmB,GACb,EAAKC,SAAS,CAAEH,OAAQE,EAAKE,gBAC7B,EAAKC,iBAAiBH,I,EAGxBG,iBAAmB,SAAAH,GACjB,EAAKC,SAAS,CACZF,QAAS,EAAKF,MAAMZ,UAAUmB,QAAO,SAAAd,GACnC,OAAOA,EAASJ,EAAEmB,oBAAoBC,SAASN,S,wEAMnD,OACE,yBAAKO,UAAU,OACb,kBAAC,EAAD,CAAQ1B,aAAcQ,KAAKR,eAC3B,kBAAC,EAAD,CAASY,QAASJ,KAAKQ,MAAME,e,GApBJf,aCIbwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6b6d5853.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Search extends Component {\n  render() {\n    return (\n      <div>\n        <br />\n        <label htmlFor=\"\">Search</label>\n        <br />\n        <input\n          type=\"text\"\n          name=\"search\"\n          id=\"search\"\n          onChange={event => {\n            this.props.updateSearch(event.target.value);\n          }}\n        />\n      </div>\n    );\n  }\n}\n","export const questions = [\n  {\n    q: \"Cual es el primero\",\n    a: \"El primer paciente es teto\"\n  },\n  {\n    q: \"Quien es el segundo?\",\n    a: \"Siempre es Mikey\"\n  },\n  {\n    q: `Describe the triple constraint. What are the three components and what is the relationship between them?`,\n    a: `Every project is constrained in different ways by its scope, time, and cost goals. These limitations are sometimes referred to in project management as the triple constraint. To create a successful project, a project manager must consider scope, time, and cost and balance these three often-competing goals. He or she must consider the following:\n\n    Scope: This goal involves questions such as, “What work will be done as part of the project? What unique product, service, or result does the customer or sponsor expect from the project? How will the scope be verified?”\n    \n    Time: This goal encompasses questions such as, “How long should it take to complete the project? What is the project’s schedule? How will the team track actual schedule performance? Who can approve changes to the schedule?”\n    \n    Cost: This goals deals with questions such as, “What should it cost to complete the project? What is the project’s budget? How will costs be tracked? Who can authorize changes to the budget?”\n    \n    Managing the triple constraint involves making trade-offs between scope, time, and cost goals for a project. Experienced project managers know that they must decide which aspect of the triple constraint is most important. If time is most important, one must change the initial scope and/or cost goals to meet the schedule. If scope goals are most important, one may need to adjust time and/or cost goals.`\n  }\n];\n","import React, { Component } from \"react\";\n\nexport default class Result extends Component {\n  render() {\n    return (\n      <div>\n        <p>\n          Question: <br /> {this.props.question}\n        </p>\n        <p>\n          Answer: <br /> {this.props.answer}\n        </p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport Result from \"./Result\";\n\nexport default class Results extends Component {\n  render() {\n    return (\n      <div>\n        {this.props.results.map((question, index) => {\n          return <Result question={question.q} answer={question.a} />;\n        })}\n      </div>\n    );\n  }\n}\n","import \"./App.css\";\nimport React, { Component } from \"react\";\n\nimport Search from \"./components/Search\";\n\nimport { questions } from \"./data/questions\";\nimport Results from \"./components/Results\";\n\nexport default class App extends Component {\n  state = { search: \"\", questions: questions, matches: [] };\n\n  updateSearch = term => {\n    this.setState({ search: term.toLowerCase() });\n    this.compareAndFilter(term);\n  };\n\n  compareAndFilter = term => {\n    this.setState({\n      matches: this.state.questions.filter(question => {\n        return question.q.toLocaleLowerCase().includes(term);\n      })\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Search updateSearch={this.updateSearch} />\n        <Results results={this.state.matches} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}